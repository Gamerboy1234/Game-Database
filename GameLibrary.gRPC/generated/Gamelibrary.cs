// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamelibrary.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gamelibrary {

  /// <summary>Holder for reflection information generated from gamelibrary.proto</summary>
  public static partial class GamelibraryReflection {

    #region Descriptor
    /// <summary>File descriptor for gamelibrary.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GamelibraryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnYW1lbGlicmFyeS5wcm90bxILZ2FtZWxpYnJhcnkiOAoSR2FtZXNTZWFy",
            "Y2hSZXF1ZXN0Eg8KB2dhbWVfaWQYASABKAMSEQoJZ2FtZV9uYW1lGAIgASgJ",
            "IkAKCkdhbWVSZWNvcmQSDwoHZ2FtZV9pZBgBIAEoAxIMCgRuYW1lGAIgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAMgASgJIlsKCkdhbWVSZXN1bHQSJQoEZ2FtZRgB",
            "IAEoCzIXLmdhbWVsaWJyYXJ5LkdhbWVSZWNvcmQSDwoHc3VjY2VzcxgCIAEo",
            "CBIVCg1lcnJvcl9tZXNzYWdlGAMgASgJIjsKE0dlbnJlc1NlYXJjaFJlcXVl",
            "c3QSEAoIZ2VucmVfaWQYASABKAMSEgoKZ2VucmVfbmFtZRgCIAEoCSJCCgtH",
            "ZW5yZVJlY29yZBIQCghnZW5yZV9pZBgBIAEoAxIMCgRuYW1lGAIgASgJEhMK",
            "C2Rlc2NyaXB0aW9uGAMgASgJIl4KC0dlbnJlUmVzdWx0EicKBWdlbnJlGAEg",
            "ASgLMhguZ2FtZWxpYnJhcnkuR2VucmVSZWNvcmQSDwoHc3VjY2VzcxgCIAEo",
            "CBIVCg1lcnJvcl9tZXNzYWdlGAMgASgJIj4KFFJhdGluZ3NTZWFyY2hSZXF1",
            "ZXN0EhEKCXJhdGluZ19pZBgBIAEoAxITCgtyYXRpbmdfbmFtZRgCIAEoCSJU",
            "CgxSYXRpbmdSZWNvcmQSEQoJcmF0aW5nX2lkGAEgASgDEgwKBG5hbWUYAiAB",
            "KAkSEwoLZGVzY3JpcHRpb24YAyABKAkSDgoGc3ltYm9sGAQgASgJImEKDFJh",
            "dGluZ1Jlc3VsdBIpCgZyYXRpbmcYASABKAsyGS5nYW1lbGlicmFyeS5SYXRp",
            "bmdSZWNvcmQSDwoHc3VjY2VzcxgCIAEoCBIVCg1lcnJvcl9tZXNzYWdlGAMg",
            "ASgJIj4KFFJldmlld3NTZWFyY2hSZXF1ZXN0EhEKCXJldmlld19pZBgBIAEo",
            "AxITCgtyZXZpZXdfbmFtZRgCIAEoCSJUCgxSZXZpZXdSZWNvcmQSEQoJcmV2",
            "aWV3X2lkGAEgASgDEgwKBG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyAB",
            "KAkSDgoGUmF0aW5nGAQgASgDImEKDFJldmlld1Jlc3VsdBIpCgZyZXZpZXcY",
            "ASABKAsyGS5nYW1lbGlicmFyeS5SZXZpZXdSZWNvcmQSDwoHc3VjY2VzcxgC",
            "IAEoCBIVCg1lcnJvcl9tZXNzYWdlGAMgASgJIkQKFlBsYXRmb3Jtc1NlYXJj",
            "aFJlcXVlc3QSEwoLcGxhdGZvcm1faWQYASABKAMSFQoNcGxhdGZvcm1fbmFt",
            "ZRgCIAEoCSJCCg5QbGF0Zm9ybVJlY29yZBITCgtwbGF0Zm9ybV9pZBgBIAEo",
            "AxIMCgRuYW1lGAIgASgJEg0KBW1ha2VyGAMgASgJImcKDlBsYXRmb3JtUmVz",
            "dWx0Ei0KCHBsYXRmb3JtGAEgASgLMhsuZ2FtZWxpYnJhcnkuUGxhdGZvcm1S",
            "ZWNvcmQSDwoHc3VjY2VzcxgCIAEoCBIVCg1lcnJvcl9tZXNzYWdlGAMgASgJ",
            "Ii8KF0dhbWVHZW5yZXNTZWFyY2hSZXF1ZXN0EhQKDGdhbWVnZW5yZV9pZBgB",
            "IAEoAyJKCg9HYW1lR2VucmVSZWNvcmQSFAoMZ2FtZWdlbnJlX2lkGAEgASgD",
            "Eg8KB2dhbWVfaWQYAiABKAMSEAoIZ2VucmVfaWQYAyABKAMiagoPR2FtZUdl",
            "bnJlUmVzdWx0Ei8KCWdhbWVnZW5yZRgBIAEoCzIcLmdhbWVsaWJyYXJ5Lkdh",
            "bWVHZW5yZVJlY29yZBIPCgdzdWNjZXNzGAIgASgIEhUKDWVycm9yX21lc3Nh",
            "Z2UYAyABKAkyiQ4KC0dhbWVMaWJyYXJ5EksKC1NlYXJjaEdhbWVzEh8uZ2Ft",
            "ZWxpYnJhcnkuR2FtZXNTZWFyY2hSZXF1ZXN0GhcuZ2FtZWxpYnJhcnkuR2Ft",
            "ZVJlY29yZCIAMAESPQoHQWRkR2FtZRIXLmdhbWVsaWJyYXJ5LkdhbWVSZWNv",
            "cmQaFy5nYW1lbGlicmFyeS5HYW1lUmVzdWx0IgASPgoIRWRpdEdhbWUSFy5n",
            "YW1lbGlicmFyeS5HYW1lUmVjb3JkGhcuZ2FtZWxpYnJhcnkuR2FtZVJlc3Vs",
            "dCIAEkAKCkRlbGV0ZUdhbWUSFy5nYW1lbGlicmFyeS5HYW1lUmVjb3JkGhcu",
            "Z2FtZWxpYnJhcnkuR2FtZVJlc3VsdCIAEk4KDFNlYXJjaEdlbnJlcxIgLmdh",
            "bWVsaWJyYXJ5LkdlbnJlc1NlYXJjaFJlcXVlc3QaGC5nYW1lbGlicmFyeS5H",
            "ZW5yZVJlY29yZCIAMAESQAoIQWRkR2VucmUSGC5nYW1lbGlicmFyeS5HZW5y",
            "ZVJlY29yZBoYLmdhbWVsaWJyYXJ5LkdlbnJlUmVzdWx0IgASQQoJRWRpdEdl",
            "bnJlEhguZ2FtZWxpYnJhcnkuR2VucmVSZWNvcmQaGC5nYW1lbGlicmFyeS5H",
            "ZW5yZVJlc3VsdCIAEkMKC0RlbGV0ZUdlbnJlEhguZ2FtZWxpYnJhcnkuR2Vu",
            "cmVSZWNvcmQaGC5nYW1lbGlicmFyeS5HZW5yZVJlc3VsdCIAElEKDVNlYXJj",
            "aFJhdGluZ3MSIS5nYW1lbGlicmFyeS5SYXRpbmdzU2VhcmNoUmVxdWVzdBoZ",
            "LmdhbWVsaWJyYXJ5LlJhdGluZ1JlY29yZCIAMAESQwoJQWRkUmF0aW5nEhku",
            "Z2FtZWxpYnJhcnkuUmF0aW5nUmVjb3JkGhkuZ2FtZWxpYnJhcnkuUmF0aW5n",
            "UmVzdWx0IgASRAoKRWRpdFJhdGluZxIZLmdhbWVsaWJyYXJ5LlJhdGluZ1Jl",
            "Y29yZBoZLmdhbWVsaWJyYXJ5LlJhdGluZ1Jlc3VsdCIAEkYKDERlbGV0ZVJh",
            "dGluZxIZLmdhbWVsaWJyYXJ5LlJhdGluZ1JlY29yZBoZLmdhbWVsaWJyYXJ5",
            "LlJhdGluZ1Jlc3VsdCIAElEKDVNlYXJjaFJldmlld3MSIS5nYW1lbGlicmFy",
            "eS5SZXZpZXdzU2VhcmNoUmVxdWVzdBoZLmdhbWVsaWJyYXJ5LlJldmlld1Jl",
            "Y29yZCIAMAESQwoJQWRkUmV2aWV3EhkuZ2FtZWxpYnJhcnkuUmV2aWV3UmVj",
            "b3JkGhkuZ2FtZWxpYnJhcnkuUmV2aWV3UmVzdWx0IgASRAoKRWRpdFJldmll",
            "dxIZLmdhbWVsaWJyYXJ5LlJldmlld1JlY29yZBoZLmdhbWVsaWJyYXJ5LlJl",
            "dmlld1Jlc3VsdCIAEkYKDERlbGV0ZVJldmlldxIZLmdhbWVsaWJyYXJ5LlJl",
            "dmlld1JlY29yZBoZLmdhbWVsaWJyYXJ5LlJldmlld1Jlc3VsdCIAElcKD1Nl",
            "YXJjaFBsYXRmb3JtcxIjLmdhbWVsaWJyYXJ5LlBsYXRmb3Jtc1NlYXJjaFJl",
            "cXVlc3QaGy5nYW1lbGlicmFyeS5QbGF0Zm9ybVJlY29yZCIAMAESSQoLQWRk",
            "UGxhdGZvcm0SGy5nYW1lbGlicmFyeS5QbGF0Zm9ybVJlY29yZBobLmdhbWVs",
            "aWJyYXJ5LlBsYXRmb3JtUmVzdWx0IgASSgoMRWRpdFBsYXRmb3JtEhsuZ2Ft",
            "ZWxpYnJhcnkuUGxhdGZvcm1SZWNvcmQaGy5nYW1lbGlicmFyeS5QbGF0Zm9y",
            "bVJlc3VsdCIAEkwKDkRlbGV0ZVBsYXRmb3JtEhsuZ2FtZWxpYnJhcnkuUGxh",
            "dGZvcm1SZWNvcmQaGy5nYW1lbGlicmFyeS5QbGF0Zm9ybVJlc3VsdCIAEloK",
            "EFNlYXJjaEdhbWVHZW5yZXMSJC5nYW1lbGlicmFyeS5HYW1lR2VucmVzU2Vh",
            "cmNoUmVxdWVzdBocLmdhbWVsaWJyYXJ5LkdhbWVHZW5yZVJlY29yZCIAMAES",
            "TAoMQWRkR2FtZUdlbnJlEhwuZ2FtZWxpYnJhcnkuR2FtZUdlbnJlUmVjb3Jk",
            "GhwuZ2FtZWxpYnJhcnkuR2FtZUdlbnJlUmVzdWx0IgASTQoNRWRpdEdhbWVH",
            "ZW5yZRIcLmdhbWVsaWJyYXJ5LkdhbWVHZW5yZVJlY29yZBocLmdhbWVsaWJy",
            "YXJ5LkdhbWVHZW5yZVJlc3VsdCIAEk8KD0RlbGV0ZUdhbWVHZW5yZRIcLmdh",
            "bWVsaWJyYXJ5LkdhbWVHZW5yZVJlY29yZBocLmdhbWVsaWJyYXJ5LkdhbWVH",
            "ZW5yZVJlc3VsdCIAQi8KE2lvLmdycGMuZ2FtZWxpYnJhcnlCEEdhbWVMaWJy",
            "YXJ5UHJvdG9QAaICA0dMQmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GamesSearchRequest), global::Gamelibrary.GamesSearchRequest.Parser, new[]{ "GameId", "GameName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GameRecord), global::Gamelibrary.GameRecord.Parser, new[]{ "GameId", "Name", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GameResult), global::Gamelibrary.GameResult.Parser, new[]{ "Game", "Success", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GenresSearchRequest), global::Gamelibrary.GenresSearchRequest.Parser, new[]{ "GenreId", "GenreName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GenreRecord), global::Gamelibrary.GenreRecord.Parser, new[]{ "GenreId", "Name", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GenreResult), global::Gamelibrary.GenreResult.Parser, new[]{ "Genre", "Success", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.RatingsSearchRequest), global::Gamelibrary.RatingsSearchRequest.Parser, new[]{ "RatingId", "RatingName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.RatingRecord), global::Gamelibrary.RatingRecord.Parser, new[]{ "RatingId", "Name", "Description", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.RatingResult), global::Gamelibrary.RatingResult.Parser, new[]{ "Rating", "Success", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.ReviewsSearchRequest), global::Gamelibrary.ReviewsSearchRequest.Parser, new[]{ "ReviewId", "ReviewName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.ReviewRecord), global::Gamelibrary.ReviewRecord.Parser, new[]{ "ReviewId", "Name", "Description", "Rating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.ReviewResult), global::Gamelibrary.ReviewResult.Parser, new[]{ "Review", "Success", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.PlatformsSearchRequest), global::Gamelibrary.PlatformsSearchRequest.Parser, new[]{ "PlatformId", "PlatformName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.PlatformRecord), global::Gamelibrary.PlatformRecord.Parser, new[]{ "PlatformId", "Name", "Maker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.PlatformResult), global::Gamelibrary.PlatformResult.Parser, new[]{ "Platform", "Success", "ErrorMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GameGenresSearchRequest), global::Gamelibrary.GameGenresSearchRequest.Parser, new[]{ "GamegenreId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GameGenreRecord), global::Gamelibrary.GameGenreRecord.Parser, new[]{ "GamegenreId", "GameId", "GenreId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gamelibrary.GameGenreResult), global::Gamelibrary.GameGenreResult.Parser, new[]{ "Gamegenre", "Success", "ErrorMessage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GamesSearchRequest : pb::IMessage<GamesSearchRequest> {
    private static readonly pb::MessageParser<GamesSearchRequest> _parser = new pb::MessageParser<GamesSearchRequest>(() => new GamesSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamesSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamesSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamesSearchRequest(GamesSearchRequest other) : this() {
      gameId_ = other.gameId_;
      gameName_ = other.gameName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamesSearchRequest Clone() {
      return new GamesSearchRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "game_name" field.</summary>
    public const int GameNameFieldNumber = 2;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamesSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamesSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (GameName != other.GameName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameId);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamesSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt64();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRecord : pb::IMessage<GameRecord> {
    private static readonly pb::MessageParser<GameRecord> _parser = new pb::MessageParser<GameRecord>(() => new GameRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord(GameRecord other) : this() {
      gameId_ = other.gameId_;
      name_ = other.name_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecord Clone() {
      return new GameRecord(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRecord other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameResult : pb::IMessage<GameResult> {
    private static readonly pb::MessageParser<GameResult> _parser = new pb::MessageParser<GameResult>(() => new GameResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult(GameResult other) : this() {
      Game = other.game_ != null ? other.Game.Clone() : null;
      success_ = other.success_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResult Clone() {
      return new GameResult(this);
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 1;
    private global::Gamelibrary.GameRecord game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gamelibrary.GameRecord Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Game, other.Game)) return false;
      if (Success != other.Success) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (game_ != null) hash ^= Game.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (game_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Game);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResult other) {
      if (other == null) {
        return;
      }
      if (other.game_ != null) {
        if (game_ == null) {
          game_ = new global::Gamelibrary.GameRecord();
        }
        Game.MergeFrom(other.Game);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (game_ == null) {
              game_ = new global::Gamelibrary.GameRecord();
            }
            input.ReadMessage(game_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenresSearchRequest : pb::IMessage<GenresSearchRequest> {
    private static readonly pb::MessageParser<GenresSearchRequest> _parser = new pb::MessageParser<GenresSearchRequest>(() => new GenresSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenresSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenresSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenresSearchRequest(GenresSearchRequest other) : this() {
      genreId_ = other.genreId_;
      genreName_ = other.genreName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenresSearchRequest Clone() {
      return new GenresSearchRequest(this);
    }

    /// <summary>Field number for the "genre_id" field.</summary>
    public const int GenreIdFieldNumber = 1;
    private long genreId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GenreId {
      get { return genreId_; }
      set {
        genreId_ = value;
      }
    }

    /// <summary>Field number for the "genre_name" field.</summary>
    public const int GenreNameFieldNumber = 2;
    private string genreName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GenreName {
      get { return genreName_; }
      set {
        genreName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenresSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenresSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GenreId != other.GenreId) return false;
      if (GenreName != other.GenreName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GenreId != 0L) hash ^= GenreId.GetHashCode();
      if (GenreName.Length != 0) hash ^= GenreName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GenreId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GenreId);
      }
      if (GenreName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GenreName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GenreId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GenreId);
      }
      if (GenreName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GenreName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenresSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.GenreId != 0L) {
        GenreId = other.GenreId;
      }
      if (other.GenreName.Length != 0) {
        GenreName = other.GenreName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GenreId = input.ReadInt64();
            break;
          }
          case 18: {
            GenreName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenreRecord : pb::IMessage<GenreRecord> {
    private static readonly pb::MessageParser<GenreRecord> _parser = new pb::MessageParser<GenreRecord>(() => new GenreRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenreRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenreRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenreRecord(GenreRecord other) : this() {
      genreId_ = other.genreId_;
      name_ = other.name_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenreRecord Clone() {
      return new GenreRecord(this);
    }

    /// <summary>Field number for the "genre_id" field.</summary>
    public const int GenreIdFieldNumber = 1;
    private long genreId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GenreId {
      get { return genreId_; }
      set {
        genreId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenreRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenreRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GenreId != other.GenreId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GenreId != 0L) hash ^= GenreId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GenreId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GenreId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GenreId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GenreId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenreRecord other) {
      if (other == null) {
        return;
      }
      if (other.GenreId != 0L) {
        GenreId = other.GenreId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GenreId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenreResult : pb::IMessage<GenreResult> {
    private static readonly pb::MessageParser<GenreResult> _parser = new pb::MessageParser<GenreResult>(() => new GenreResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenreResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenreResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenreResult(GenreResult other) : this() {
      Genre = other.genre_ != null ? other.Genre.Clone() : null;
      success_ = other.success_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenreResult Clone() {
      return new GenreResult(this);
    }

    /// <summary>Field number for the "genre" field.</summary>
    public const int GenreFieldNumber = 1;
    private global::Gamelibrary.GenreRecord genre_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gamelibrary.GenreRecord Genre {
      get { return genre_; }
      set {
        genre_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenreResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenreResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Genre, other.Genre)) return false;
      if (Success != other.Success) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (genre_ != null) hash ^= Genre.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (genre_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Genre);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (genre_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Genre);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenreResult other) {
      if (other == null) {
        return;
      }
      if (other.genre_ != null) {
        if (genre_ == null) {
          genre_ = new global::Gamelibrary.GenreRecord();
        }
        Genre.MergeFrom(other.Genre);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (genre_ == null) {
              genre_ = new global::Gamelibrary.GenreRecord();
            }
            input.ReadMessage(genre_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RatingsSearchRequest : pb::IMessage<RatingsSearchRequest> {
    private static readonly pb::MessageParser<RatingsSearchRequest> _parser = new pb::MessageParser<RatingsSearchRequest>(() => new RatingsSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RatingsSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingsSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingsSearchRequest(RatingsSearchRequest other) : this() {
      ratingId_ = other.ratingId_;
      ratingName_ = other.ratingName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingsSearchRequest Clone() {
      return new RatingsSearchRequest(this);
    }

    /// <summary>Field number for the "rating_id" field.</summary>
    public const int RatingIdFieldNumber = 1;
    private long ratingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RatingId {
      get { return ratingId_; }
      set {
        ratingId_ = value;
      }
    }

    /// <summary>Field number for the "rating_name" field.</summary>
    public const int RatingNameFieldNumber = 2;
    private string ratingName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RatingName {
      get { return ratingName_; }
      set {
        ratingName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RatingsSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RatingsSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RatingId != other.RatingId) return false;
      if (RatingName != other.RatingName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RatingId != 0L) hash ^= RatingId.GetHashCode();
      if (RatingName.Length != 0) hash ^= RatingName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RatingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RatingId);
      }
      if (RatingName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RatingName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RatingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RatingId);
      }
      if (RatingName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RatingName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RatingsSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.RatingId != 0L) {
        RatingId = other.RatingId;
      }
      if (other.RatingName.Length != 0) {
        RatingName = other.RatingName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RatingId = input.ReadInt64();
            break;
          }
          case 18: {
            RatingName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RatingRecord : pb::IMessage<RatingRecord> {
    private static readonly pb::MessageParser<RatingRecord> _parser = new pb::MessageParser<RatingRecord>(() => new RatingRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RatingRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingRecord(RatingRecord other) : this() {
      ratingId_ = other.ratingId_;
      name_ = other.name_;
      description_ = other.description_;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingRecord Clone() {
      return new RatingRecord(this);
    }

    /// <summary>Field number for the "rating_id" field.</summary>
    public const int RatingIdFieldNumber = 1;
    private long ratingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RatingId {
      get { return ratingId_; }
      set {
        ratingId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RatingRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RatingRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RatingId != other.RatingId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RatingId != 0L) hash ^= RatingId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RatingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RatingId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RatingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RatingId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RatingRecord other) {
      if (other == null) {
        return;
      }
      if (other.RatingId != 0L) {
        RatingId = other.RatingId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RatingId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RatingResult : pb::IMessage<RatingResult> {
    private static readonly pb::MessageParser<RatingResult> _parser = new pb::MessageParser<RatingResult>(() => new RatingResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RatingResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingResult(RatingResult other) : this() {
      Rating = other.rating_ != null ? other.Rating.Clone() : null;
      success_ = other.success_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RatingResult Clone() {
      return new RatingResult(this);
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 1;
    private global::Gamelibrary.RatingRecord rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gamelibrary.RatingRecord Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RatingResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RatingResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rating, other.Rating)) return false;
      if (Success != other.Success) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rating_ != null) hash ^= Rating.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rating_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rating);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rating);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RatingResult other) {
      if (other == null) {
        return;
      }
      if (other.rating_ != null) {
        if (rating_ == null) {
          rating_ = new global::Gamelibrary.RatingRecord();
        }
        Rating.MergeFrom(other.Rating);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rating_ == null) {
              rating_ = new global::Gamelibrary.RatingRecord();
            }
            input.ReadMessage(rating_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReviewsSearchRequest : pb::IMessage<ReviewsSearchRequest> {
    private static readonly pb::MessageParser<ReviewsSearchRequest> _parser = new pb::MessageParser<ReviewsSearchRequest>(() => new ReviewsSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReviewsSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewsSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewsSearchRequest(ReviewsSearchRequest other) : this() {
      reviewId_ = other.reviewId_;
      reviewName_ = other.reviewName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewsSearchRequest Clone() {
      return new ReviewsSearchRequest(this);
    }

    /// <summary>Field number for the "review_id" field.</summary>
    public const int ReviewIdFieldNumber = 1;
    private long reviewId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReviewId {
      get { return reviewId_; }
      set {
        reviewId_ = value;
      }
    }

    /// <summary>Field number for the "review_name" field.</summary>
    public const int ReviewNameFieldNumber = 2;
    private string reviewName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReviewName {
      get { return reviewName_; }
      set {
        reviewName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReviewsSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReviewsSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReviewId != other.ReviewId) return false;
      if (ReviewName != other.ReviewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReviewId != 0L) hash ^= ReviewId.GetHashCode();
      if (ReviewName.Length != 0) hash ^= ReviewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReviewId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReviewId);
      }
      if (ReviewName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReviewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReviewId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReviewId);
      }
      if (ReviewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReviewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReviewsSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.ReviewId != 0L) {
        ReviewId = other.ReviewId;
      }
      if (other.ReviewName.Length != 0) {
        ReviewName = other.ReviewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReviewId = input.ReadInt64();
            break;
          }
          case 18: {
            ReviewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReviewRecord : pb::IMessage<ReviewRecord> {
    private static readonly pb::MessageParser<ReviewRecord> _parser = new pb::MessageParser<ReviewRecord>(() => new ReviewRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReviewRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewRecord(ReviewRecord other) : this() {
      reviewId_ = other.reviewId_;
      name_ = other.name_;
      description_ = other.description_;
      rating_ = other.rating_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewRecord Clone() {
      return new ReviewRecord(this);
    }

    /// <summary>Field number for the "review_id" field.</summary>
    public const int ReviewIdFieldNumber = 1;
    private long reviewId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReviewId {
      get { return reviewId_; }
      set {
        reviewId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rating" field.</summary>
    public const int RatingFieldNumber = 4;
    private long rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReviewRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReviewRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReviewId != other.ReviewId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Rating != other.Rating) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReviewId != 0L) hash ^= ReviewId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Rating != 0L) hash ^= Rating.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReviewId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReviewId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Rating != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Rating);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReviewId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReviewId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Rating != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rating);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReviewRecord other) {
      if (other == null) {
        return;
      }
      if (other.ReviewId != 0L) {
        ReviewId = other.ReviewId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Rating != 0L) {
        Rating = other.Rating;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReviewId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            Rating = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReviewResult : pb::IMessage<ReviewResult> {
    private static readonly pb::MessageParser<ReviewResult> _parser = new pb::MessageParser<ReviewResult>(() => new ReviewResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReviewResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewResult(ReviewResult other) : this() {
      Review = other.review_ != null ? other.Review.Clone() : null;
      success_ = other.success_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviewResult Clone() {
      return new ReviewResult(this);
    }

    /// <summary>Field number for the "review" field.</summary>
    public const int ReviewFieldNumber = 1;
    private global::Gamelibrary.ReviewRecord review_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gamelibrary.ReviewRecord Review {
      get { return review_; }
      set {
        review_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReviewResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReviewResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Review, other.Review)) return false;
      if (Success != other.Success) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (review_ != null) hash ^= Review.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (review_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Review);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (review_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Review);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReviewResult other) {
      if (other == null) {
        return;
      }
      if (other.review_ != null) {
        if (review_ == null) {
          review_ = new global::Gamelibrary.ReviewRecord();
        }
        Review.MergeFrom(other.Review);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (review_ == null) {
              review_ = new global::Gamelibrary.ReviewRecord();
            }
            input.ReadMessage(review_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlatformsSearchRequest : pb::IMessage<PlatformsSearchRequest> {
    private static readonly pb::MessageParser<PlatformsSearchRequest> _parser = new pb::MessageParser<PlatformsSearchRequest>(() => new PlatformsSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlatformsSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformsSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformsSearchRequest(PlatformsSearchRequest other) : this() {
      platformId_ = other.platformId_;
      platformName_ = other.platformName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformsSearchRequest Clone() {
      return new PlatformsSearchRequest(this);
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private long platformId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlatformId {
      get { return platformId_; }
      set {
        platformId_ = value;
      }
    }

    /// <summary>Field number for the "platform_name" field.</summary>
    public const int PlatformNameFieldNumber = 2;
    private string platformName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformName {
      get { return platformName_; }
      set {
        platformName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlatformsSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlatformsSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformId != other.PlatformId) return false;
      if (PlatformName != other.PlatformName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformId != 0L) hash ^= PlatformId.GetHashCode();
      if (PlatformName.Length != 0) hash ^= PlatformName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlatformId);
      }
      if (PlatformName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlatformName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlatformId);
      }
      if (PlatformName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlatformsSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlatformId != 0L) {
        PlatformId = other.PlatformId;
      }
      if (other.PlatformName.Length != 0) {
        PlatformName = other.PlatformName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlatformId = input.ReadInt64();
            break;
          }
          case 18: {
            PlatformName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlatformRecord : pb::IMessage<PlatformRecord> {
    private static readonly pb::MessageParser<PlatformRecord> _parser = new pb::MessageParser<PlatformRecord>(() => new PlatformRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlatformRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformRecord(PlatformRecord other) : this() {
      platformId_ = other.platformId_;
      name_ = other.name_;
      maker_ = other.maker_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformRecord Clone() {
      return new PlatformRecord(this);
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private long platformId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlatformId {
      get { return platformId_; }
      set {
        platformId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maker" field.</summary>
    public const int MakerFieldNumber = 3;
    private string maker_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Maker {
      get { return maker_; }
      set {
        maker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlatformRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlatformRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformId != other.PlatformId) return false;
      if (Name != other.Name) return false;
      if (Maker != other.Maker) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformId != 0L) hash ^= PlatformId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Maker.Length != 0) hash ^= Maker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlatformId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Maker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Maker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlatformId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Maker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Maker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlatformRecord other) {
      if (other == null) {
        return;
      }
      if (other.PlatformId != 0L) {
        PlatformId = other.PlatformId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Maker.Length != 0) {
        Maker = other.Maker;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlatformId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Maker = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlatformResult : pb::IMessage<PlatformResult> {
    private static readonly pb::MessageParser<PlatformResult> _parser = new pb::MessageParser<PlatformResult>(() => new PlatformResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlatformResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformResult(PlatformResult other) : this() {
      Platform = other.platform_ != null ? other.Platform.Clone() : null;
      success_ = other.success_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformResult Clone() {
      return new PlatformResult(this);
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 1;
    private global::Gamelibrary.PlatformRecord platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gamelibrary.PlatformRecord Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlatformResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlatformResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Platform, other.Platform)) return false;
      if (Success != other.Success) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (platform_ != null) hash ^= Platform.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (platform_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Platform);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (platform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Platform);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlatformResult other) {
      if (other == null) {
        return;
      }
      if (other.platform_ != null) {
        if (platform_ == null) {
          platform_ = new global::Gamelibrary.PlatformRecord();
        }
        Platform.MergeFrom(other.Platform);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (platform_ == null) {
              platform_ = new global::Gamelibrary.PlatformRecord();
            }
            input.ReadMessage(platform_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameGenresSearchRequest : pb::IMessage<GameGenresSearchRequest> {
    private static readonly pb::MessageParser<GameGenresSearchRequest> _parser = new pb::MessageParser<GameGenresSearchRequest>(() => new GameGenresSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameGenresSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenresSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenresSearchRequest(GameGenresSearchRequest other) : this() {
      gamegenreId_ = other.gamegenreId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenresSearchRequest Clone() {
      return new GameGenresSearchRequest(this);
    }

    /// <summary>Field number for the "gamegenre_id" field.</summary>
    public const int GamegenreIdFieldNumber = 1;
    private long gamegenreId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GamegenreId {
      get { return gamegenreId_; }
      set {
        gamegenreId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameGenresSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameGenresSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GamegenreId != other.GamegenreId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GamegenreId != 0L) hash ^= GamegenreId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GamegenreId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GamegenreId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GamegenreId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GamegenreId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameGenresSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.GamegenreId != 0L) {
        GamegenreId = other.GamegenreId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GamegenreId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameGenreRecord : pb::IMessage<GameGenreRecord> {
    private static readonly pb::MessageParser<GameGenreRecord> _parser = new pb::MessageParser<GameGenreRecord>(() => new GameGenreRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameGenreRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenreRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenreRecord(GameGenreRecord other) : this() {
      gamegenreId_ = other.gamegenreId_;
      gameId_ = other.gameId_;
      genreId_ = other.genreId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenreRecord Clone() {
      return new GameGenreRecord(this);
    }

    /// <summary>Field number for the "gamegenre_id" field.</summary>
    public const int GamegenreIdFieldNumber = 1;
    private long gamegenreId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GamegenreId {
      get { return gamegenreId_; }
      set {
        gamegenreId_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "genre_id" field.</summary>
    public const int GenreIdFieldNumber = 3;
    private long genreId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GenreId {
      get { return genreId_; }
      set {
        genreId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameGenreRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameGenreRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GamegenreId != other.GamegenreId) return false;
      if (GameId != other.GameId) return false;
      if (GenreId != other.GenreId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GamegenreId != 0L) hash ^= GamegenreId.GetHashCode();
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      if (GenreId != 0L) hash ^= GenreId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GamegenreId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GamegenreId);
      }
      if (GameId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GameId);
      }
      if (GenreId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(GenreId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GamegenreId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GamegenreId);
      }
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      if (GenreId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GenreId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameGenreRecord other) {
      if (other == null) {
        return;
      }
      if (other.GamegenreId != 0L) {
        GamegenreId = other.GamegenreId;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      if (other.GenreId != 0L) {
        GenreId = other.GenreId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GamegenreId = input.ReadInt64();
            break;
          }
          case 16: {
            GameId = input.ReadInt64();
            break;
          }
          case 24: {
            GenreId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameGenreResult : pb::IMessage<GameGenreResult> {
    private static readonly pb::MessageParser<GameGenreResult> _parser = new pb::MessageParser<GameGenreResult>(() => new GameGenreResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameGenreResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenreResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenreResult(GameGenreResult other) : this() {
      Gamegenre = other.gamegenre_ != null ? other.Gamegenre.Clone() : null;
      success_ = other.success_;
      errorMessage_ = other.errorMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameGenreResult Clone() {
      return new GameGenreResult(this);
    }

    /// <summary>Field number for the "gamegenre" field.</summary>
    public const int GamegenreFieldNumber = 1;
    private global::Gamelibrary.GameGenreRecord gamegenre_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gamelibrary.GameGenreRecord Gamegenre {
      get { return gamegenre_; }
      set {
        gamegenre_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameGenreResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameGenreResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Gamegenre, other.Gamegenre)) return false;
      if (Success != other.Success) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gamegenre_ != null) hash ^= Gamegenre.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gamegenre_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Gamegenre);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gamegenre_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gamegenre);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameGenreResult other) {
      if (other == null) {
        return;
      }
      if (other.gamegenre_ != null) {
        if (gamegenre_ == null) {
          gamegenre_ = new global::Gamelibrary.GameGenreRecord();
        }
        Gamegenre.MergeFrom(other.Gamegenre);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gamegenre_ == null) {
              gamegenre_ = new global::Gamelibrary.GameGenreRecord();
            }
            input.ReadMessage(gamegenre_);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
