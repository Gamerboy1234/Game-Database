// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamelibrary.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Gamelibrary {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class GameLibrary
  {
    static readonly string __ServiceName = "gamelibrary.GameLibrary";

    static readonly grpc::Marshaller<global::Gamelibrary.GamesSearchRequest> __Marshaller_gamelibrary_GamesSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamesSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRecord> __Marshaller_gamelibrary_GameRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameResult> __Marshaller_gamelibrary_GameResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GenresSearchRequest> __Marshaller_gamelibrary_GenresSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GenresSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GenreRecord> __Marshaller_gamelibrary_GenreRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GenreRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GenreResult> __Marshaller_gamelibrary_GenreResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GenreResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.RatingsSearchRequest> __Marshaller_gamelibrary_RatingsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.RatingsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.RatingRecord> __Marshaller_gamelibrary_RatingRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.RatingRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.RatingResult> __Marshaller_gamelibrary_RatingResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.RatingResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.ReviewsSearchRequest> __Marshaller_gamelibrary_ReviewsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.ReviewsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.ReviewRecord> __Marshaller_gamelibrary_ReviewRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.ReviewRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.ReviewResult> __Marshaller_gamelibrary_ReviewResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.ReviewResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Gamelibrary.GamesSearchRequest, global::Gamelibrary.GameRecord> __Method_SearchGames = new grpc::Method<global::Gamelibrary.GamesSearchRequest, global::Gamelibrary.GameRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGames",
        __Marshaller_gamelibrary_GamesSearchRequest,
        __Marshaller_gamelibrary_GameRecord);

    static readonly grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult> __Method_AddGame = new grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGame",
        __Marshaller_gamelibrary_GameRecord,
        __Marshaller_gamelibrary_GameResult);

    static readonly grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult> __Method_EditGame = new grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGame",
        __Marshaller_gamelibrary_GameRecord,
        __Marshaller_gamelibrary_GameResult);

    static readonly grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult> __Method_DeleteGame = new grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGame",
        __Marshaller_gamelibrary_GameRecord,
        __Marshaller_gamelibrary_GameResult);

    static readonly grpc::Method<global::Gamelibrary.GenresSearchRequest, global::Gamelibrary.GenreRecord> __Method_SearchGenres = new grpc::Method<global::Gamelibrary.GenresSearchRequest, global::Gamelibrary.GenreRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGenres",
        __Marshaller_gamelibrary_GenresSearchRequest,
        __Marshaller_gamelibrary_GenreRecord);

    static readonly grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult> __Method_AddGenre = new grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGenre",
        __Marshaller_gamelibrary_GenreRecord,
        __Marshaller_gamelibrary_GenreResult);

    static readonly grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult> __Method_EditGenre = new grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGenre",
        __Marshaller_gamelibrary_GenreRecord,
        __Marshaller_gamelibrary_GenreResult);

    static readonly grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult> __Method_DeleteGenre = new grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGenre",
        __Marshaller_gamelibrary_GenreRecord,
        __Marshaller_gamelibrary_GenreResult);

    static readonly grpc::Method<global::Gamelibrary.RatingsSearchRequest, global::Gamelibrary.RatingRecord> __Method_SearchRatings = new grpc::Method<global::Gamelibrary.RatingsSearchRequest, global::Gamelibrary.RatingRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchRatings",
        __Marshaller_gamelibrary_RatingsSearchRequest,
        __Marshaller_gamelibrary_RatingRecord);

    static readonly grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult> __Method_AddRating = new grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRating",
        __Marshaller_gamelibrary_RatingRecord,
        __Marshaller_gamelibrary_RatingResult);

    static readonly grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult> __Method_EditRating = new grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditRating",
        __Marshaller_gamelibrary_RatingRecord,
        __Marshaller_gamelibrary_RatingResult);

    static readonly grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult> __Method_DeleteRating = new grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRating",
        __Marshaller_gamelibrary_RatingRecord,
        __Marshaller_gamelibrary_RatingResult);

    static readonly grpc::Method<global::Gamelibrary.ReviewsSearchRequest, global::Gamelibrary.ReviewRecord> __Method_SearchReviews = new grpc::Method<global::Gamelibrary.ReviewsSearchRequest, global::Gamelibrary.ReviewRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchReviews",
        __Marshaller_gamelibrary_ReviewsSearchRequest,
        __Marshaller_gamelibrary_ReviewRecord);

    static readonly grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult> __Method_AddReview = new grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddReview",
        __Marshaller_gamelibrary_ReviewRecord,
        __Marshaller_gamelibrary_ReviewResult);

    static readonly grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult> __Method_EditReview = new grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditReview",
        __Marshaller_gamelibrary_ReviewRecord,
        __Marshaller_gamelibrary_ReviewResult);

    static readonly grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult> __Method_DeleteReview = new grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteReview",
        __Marshaller_gamelibrary_ReviewRecord,
        __Marshaller_gamelibrary_ReviewResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameLibrary</summary>
    public abstract partial class GameLibraryBase
    {
      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGames(global::Gamelibrary.GamesSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameResult> AddGame(global::Gamelibrary.GameRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameResult> EditGame(global::Gamelibrary.GameRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameResult> DeleteGame(global::Gamelibrary.GameRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of genres that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGenres(global::Gamelibrary.GenresSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GenreRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GenreResult> AddGenre(global::Gamelibrary.GenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GenreResult> EditGenre(global::Gamelibrary.GenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GenreResult> DeleteGenre(global::Gamelibrary.GenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of ratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchRatings(global::Gamelibrary.RatingsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.RatingRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.RatingResult> AddRating(global::Gamelibrary.RatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.RatingResult> EditRating(global::Gamelibrary.RatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.RatingResult> DeleteRating(global::Gamelibrary.RatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of reviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchReviews(global::Gamelibrary.ReviewsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.ReviewRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.ReviewResult> AddReview(global::Gamelibrary.ReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.ReviewResult> EditReview(global::Gamelibrary.ReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.ReviewResult> DeleteReview(global::Gamelibrary.ReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameLibrary</summary>
    public partial class GameLibraryClient : grpc::ClientBase<GameLibraryClient>
    {
      /// <summary>Creates a new client for GameLibrary</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameLibraryClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameLibrary that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameLibraryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameLibraryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameLibraryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRecord> SearchGames(global::Gamelibrary.GamesSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRecord> SearchGames(global::Gamelibrary.GamesSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGames, null, options, request);
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult AddGame(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult AddGame(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGame, null, options, request);
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> AddGameAsync(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> AddGameAsync(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGame, null, options, request);
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult EditGame(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult EditGame(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGame, null, options, request);
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> EditGameAsync(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> EditGameAsync(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGame, null, options, request);
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult DeleteGame(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult DeleteGame(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGame, null, options, request);
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> DeleteGameAsync(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> DeleteGameAsync(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGame, null, options, request);
      }
      /// <summary>
      /// Obtains a list of genres that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GenreRecord> SearchGenres(global::Gamelibrary.GenresSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGenres(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of genres that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GenreRecord> SearchGenres(global::Gamelibrary.GenresSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGenres, null, options, request);
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult AddGenre(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult AddGenre(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGenre, null, options, request);
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> AddGenreAsync(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> AddGenreAsync(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGenre, null, options, request);
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult EditGenre(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult EditGenre(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGenre, null, options, request);
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> EditGenreAsync(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> EditGenreAsync(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGenre, null, options, request);
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult DeleteGenre(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult DeleteGenre(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGenre, null, options, request);
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> DeleteGenreAsync(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> DeleteGenreAsync(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGenre, null, options, request);
      }
      /// <summary>
      /// Obtains a list of ratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.RatingRecord> SearchRatings(global::Gamelibrary.RatingsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchRatings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of ratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.RatingRecord> SearchRatings(global::Gamelibrary.RatingsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchRatings, null, options, request);
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult AddRating(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult AddRating(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRating, null, options, request);
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> AddRatingAsync(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> AddRatingAsync(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRating, null, options, request);
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult EditRating(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult EditRating(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditRating, null, options, request);
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> EditRatingAsync(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> EditRatingAsync(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditRating, null, options, request);
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult DeleteRating(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult DeleteRating(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRating, null, options, request);
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> DeleteRatingAsync(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> DeleteRatingAsync(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRating, null, options, request);
      }
      /// <summary>
      /// Obtains a list of reviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.ReviewRecord> SearchReviews(global::Gamelibrary.ReviewsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchReviews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of reviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.ReviewRecord> SearchReviews(global::Gamelibrary.ReviewsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchReviews, null, options, request);
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult AddReview(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult AddReview(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddReview, null, options, request);
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> AddReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> AddReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddReview, null, options, request);
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult EditReview(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult EditReview(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditReview, null, options, request);
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> EditReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> EditReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditReview, null, options, request);
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult DeleteReview(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult DeleteReview(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteReview, null, options, request);
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> DeleteReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> DeleteReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteReview, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameLibraryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameLibraryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameLibraryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SearchGames, serviceImpl.SearchGames)
          .AddMethod(__Method_AddGame, serviceImpl.AddGame)
          .AddMethod(__Method_EditGame, serviceImpl.EditGame)
          .AddMethod(__Method_DeleteGame, serviceImpl.DeleteGame)
          .AddMethod(__Method_SearchGenres, serviceImpl.SearchGenres)
          .AddMethod(__Method_AddGenre, serviceImpl.AddGenre)
          .AddMethod(__Method_EditGenre, serviceImpl.EditGenre)
          .AddMethod(__Method_DeleteGenre, serviceImpl.DeleteGenre)
          .AddMethod(__Method_SearchRatings, serviceImpl.SearchRatings)
          .AddMethod(__Method_AddRating, serviceImpl.AddRating)
          .AddMethod(__Method_EditRating, serviceImpl.EditRating)
          .AddMethod(__Method_DeleteRating, serviceImpl.DeleteRating)
          .AddMethod(__Method_SearchReviews, serviceImpl.SearchReviews)
          .AddMethod(__Method_AddReview, serviceImpl.AddReview)
          .AddMethod(__Method_EditReview, serviceImpl.EditReview)
          .AddMethod(__Method_DeleteReview, serviceImpl.DeleteReview).Build();
    }

  }
}
#endregion
