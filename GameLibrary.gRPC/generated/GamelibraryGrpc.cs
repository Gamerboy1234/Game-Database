// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gamelibrary.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Gamelibrary {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class GameLibrary
  {
    static readonly string __ServiceName = "gamelibrary.GameLibrary";

    static readonly grpc::Marshaller<global::Gamelibrary.GamesSearchRequest> __Marshaller_gamelibrary_GamesSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamesSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRecord> __Marshaller_gamelibrary_GameRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameResult> __Marshaller_gamelibrary_GameResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GenresSearchRequest> __Marshaller_gamelibrary_GenresSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GenresSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GenreRecord> __Marshaller_gamelibrary_GenreRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GenreRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GenreResult> __Marshaller_gamelibrary_GenreResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GenreResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.RatingsSearchRequest> __Marshaller_gamelibrary_RatingsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.RatingsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.RatingRecord> __Marshaller_gamelibrary_RatingRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.RatingRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.RatingResult> __Marshaller_gamelibrary_RatingResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.RatingResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.ReviewsSearchRequest> __Marshaller_gamelibrary_ReviewsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.ReviewsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.ReviewRecord> __Marshaller_gamelibrary_ReviewRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.ReviewRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.ReviewResult> __Marshaller_gamelibrary_ReviewResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.ReviewResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.PlatformsSearchRequest> __Marshaller_gamelibrary_PlatformsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.PlatformsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.PlatformRecord> __Marshaller_gamelibrary_PlatformRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.PlatformRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.PlatformResult> __Marshaller_gamelibrary_PlatformResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.PlatformResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameGenresSearchRequest> __Marshaller_gamelibrary_GameGenresSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameGenresSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameGenreRecord> __Marshaller_gamelibrary_GameGenreRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameGenreRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameGenresSearchRequestByGameId> __Marshaller_gamelibrary_GameGenresSearchRequestByGameId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameGenresSearchRequestByGameId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameGenresSearchRequestByGenreId> __Marshaller_gamelibrary_GameGenresSearchRequestByGenreId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameGenresSearchRequestByGenreId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameGenreResult> __Marshaller_gamelibrary_GameGenreResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameGenreResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GamePlatformsSearchRequest> __Marshaller_gamelibrary_GamePlatformsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamePlatformsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GamePlatformRecord> __Marshaller_gamelibrary_GamePlatformRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamePlatformRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GamePlatformsSearchRequestByGameId> __Marshaller_gamelibrary_GamePlatformsSearchRequestByGameId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamePlatformsSearchRequestByGameId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GamePlatformsSearchRequestByPlatformId> __Marshaller_gamelibrary_GamePlatformsSearchRequestByPlatformId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamePlatformsSearchRequestByPlatformId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GamePlatformResult> __Marshaller_gamelibrary_GamePlatformResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GamePlatformResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.SearchGameReviewsRequest> __Marshaller_gamelibrary_SearchGameReviewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.SearchGameReviewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameReviewRecord> __Marshaller_gamelibrary_GameReviewRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameReviewRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.SearchGameReviewByGameIdRequest> __Marshaller_gamelibrary_SearchGameReviewByGameIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.SearchGameReviewByGameIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.SearchGameReviewByReviewIdRequest> __Marshaller_gamelibrary_SearchGameReviewByReviewIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.SearchGameReviewByReviewIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameReviewResult> __Marshaller_gamelibrary_GameReviewResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameReviewResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRatingsSearchRequest> __Marshaller_gamelibrary_GameRatingsSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRatingsSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRatingRecord> __Marshaller_gamelibrary_GameRatingRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRatingRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRatingsSearchRequestByGameId> __Marshaller_gamelibrary_GameRatingsSearchRequestByGameId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRatingsSearchRequestByGameId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRatingsSearchRequestByRatingId> __Marshaller_gamelibrary_GameRatingsSearchRequestByRatingId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRatingsSearchRequestByRatingId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameRatingResult> __Marshaller_gamelibrary_GameRatingResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameRatingResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameImagesSearchRequest> __Marshaller_gamelibrary_GameImagesSearchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameImagesSearchRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameImageRecord> __Marshaller_gamelibrary_GameImageRecord = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameImageRecord.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameImagesSearchRequestByGameId> __Marshaller_gamelibrary_GameImagesSearchRequestByGameId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameImagesSearchRequestByGameId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Gamelibrary.GameImageResult> __Marshaller_gamelibrary_GameImageResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Gamelibrary.GameImageResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Gamelibrary.GamesSearchRequest, global::Gamelibrary.GameRecord> __Method_SearchGames = new grpc::Method<global::Gamelibrary.GamesSearchRequest, global::Gamelibrary.GameRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGames",
        __Marshaller_gamelibrary_GamesSearchRequest,
        __Marshaller_gamelibrary_GameRecord);

    static readonly grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult> __Method_AddGame = new grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGame",
        __Marshaller_gamelibrary_GameRecord,
        __Marshaller_gamelibrary_GameResult);

    static readonly grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult> __Method_EditGame = new grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGame",
        __Marshaller_gamelibrary_GameRecord,
        __Marshaller_gamelibrary_GameResult);

    static readonly grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult> __Method_DeleteGame = new grpc::Method<global::Gamelibrary.GameRecord, global::Gamelibrary.GameResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGame",
        __Marshaller_gamelibrary_GameRecord,
        __Marshaller_gamelibrary_GameResult);

    static readonly grpc::Method<global::Gamelibrary.GenresSearchRequest, global::Gamelibrary.GenreRecord> __Method_SearchGenres = new grpc::Method<global::Gamelibrary.GenresSearchRequest, global::Gamelibrary.GenreRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGenres",
        __Marshaller_gamelibrary_GenresSearchRequest,
        __Marshaller_gamelibrary_GenreRecord);

    static readonly grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult> __Method_AddGenre = new grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGenre",
        __Marshaller_gamelibrary_GenreRecord,
        __Marshaller_gamelibrary_GenreResult);

    static readonly grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult> __Method_EditGenre = new grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGenre",
        __Marshaller_gamelibrary_GenreRecord,
        __Marshaller_gamelibrary_GenreResult);

    static readonly grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult> __Method_DeleteGenre = new grpc::Method<global::Gamelibrary.GenreRecord, global::Gamelibrary.GenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGenre",
        __Marshaller_gamelibrary_GenreRecord,
        __Marshaller_gamelibrary_GenreResult);

    static readonly grpc::Method<global::Gamelibrary.RatingsSearchRequest, global::Gamelibrary.RatingRecord> __Method_SearchRatings = new grpc::Method<global::Gamelibrary.RatingsSearchRequest, global::Gamelibrary.RatingRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchRatings",
        __Marshaller_gamelibrary_RatingsSearchRequest,
        __Marshaller_gamelibrary_RatingRecord);

    static readonly grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult> __Method_AddRating = new grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddRating",
        __Marshaller_gamelibrary_RatingRecord,
        __Marshaller_gamelibrary_RatingResult);

    static readonly grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult> __Method_EditRating = new grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditRating",
        __Marshaller_gamelibrary_RatingRecord,
        __Marshaller_gamelibrary_RatingResult);

    static readonly grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult> __Method_DeleteRating = new grpc::Method<global::Gamelibrary.RatingRecord, global::Gamelibrary.RatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRating",
        __Marshaller_gamelibrary_RatingRecord,
        __Marshaller_gamelibrary_RatingResult);

    static readonly grpc::Method<global::Gamelibrary.ReviewsSearchRequest, global::Gamelibrary.ReviewRecord> __Method_SearchReviews = new grpc::Method<global::Gamelibrary.ReviewsSearchRequest, global::Gamelibrary.ReviewRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchReviews",
        __Marshaller_gamelibrary_ReviewsSearchRequest,
        __Marshaller_gamelibrary_ReviewRecord);

    static readonly grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult> __Method_AddReview = new grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddReview",
        __Marshaller_gamelibrary_ReviewRecord,
        __Marshaller_gamelibrary_ReviewResult);

    static readonly grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult> __Method_EditReview = new grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditReview",
        __Marshaller_gamelibrary_ReviewRecord,
        __Marshaller_gamelibrary_ReviewResult);

    static readonly grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult> __Method_DeleteReview = new grpc::Method<global::Gamelibrary.ReviewRecord, global::Gamelibrary.ReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteReview",
        __Marshaller_gamelibrary_ReviewRecord,
        __Marshaller_gamelibrary_ReviewResult);

    static readonly grpc::Method<global::Gamelibrary.PlatformsSearchRequest, global::Gamelibrary.PlatformRecord> __Method_SearchPlatforms = new grpc::Method<global::Gamelibrary.PlatformsSearchRequest, global::Gamelibrary.PlatformRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchPlatforms",
        __Marshaller_gamelibrary_PlatformsSearchRequest,
        __Marshaller_gamelibrary_PlatformRecord);

    static readonly grpc::Method<global::Gamelibrary.PlatformRecord, global::Gamelibrary.PlatformResult> __Method_AddPlatform = new grpc::Method<global::Gamelibrary.PlatformRecord, global::Gamelibrary.PlatformResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPlatform",
        __Marshaller_gamelibrary_PlatformRecord,
        __Marshaller_gamelibrary_PlatformResult);

    static readonly grpc::Method<global::Gamelibrary.PlatformRecord, global::Gamelibrary.PlatformResult> __Method_EditPlatform = new grpc::Method<global::Gamelibrary.PlatformRecord, global::Gamelibrary.PlatformResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditPlatform",
        __Marshaller_gamelibrary_PlatformRecord,
        __Marshaller_gamelibrary_PlatformResult);

    static readonly grpc::Method<global::Gamelibrary.PlatformRecord, global::Gamelibrary.PlatformResult> __Method_DeletePlatform = new grpc::Method<global::Gamelibrary.PlatformRecord, global::Gamelibrary.PlatformResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePlatform",
        __Marshaller_gamelibrary_PlatformRecord,
        __Marshaller_gamelibrary_PlatformResult);

    static readonly grpc::Method<global::Gamelibrary.GameGenresSearchRequest, global::Gamelibrary.GameGenreRecord> __Method_SearchGameGenres = new grpc::Method<global::Gamelibrary.GameGenresSearchRequest, global::Gamelibrary.GameGenreRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameGenres",
        __Marshaller_gamelibrary_GameGenresSearchRequest,
        __Marshaller_gamelibrary_GameGenreRecord);

    static readonly grpc::Method<global::Gamelibrary.GameGenresSearchRequestByGameId, global::Gamelibrary.GameGenreRecord> __Method_SearchGameGenresByGameId = new grpc::Method<global::Gamelibrary.GameGenresSearchRequestByGameId, global::Gamelibrary.GameGenreRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameGenresByGameId",
        __Marshaller_gamelibrary_GameGenresSearchRequestByGameId,
        __Marshaller_gamelibrary_GameGenreRecord);

    static readonly grpc::Method<global::Gamelibrary.GameGenresSearchRequestByGenreId, global::Gamelibrary.GameGenreRecord> __Method_SearchGameGenresByGenreId = new grpc::Method<global::Gamelibrary.GameGenresSearchRequestByGenreId, global::Gamelibrary.GameGenreRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameGenresByGenreId",
        __Marshaller_gamelibrary_GameGenresSearchRequestByGenreId,
        __Marshaller_gamelibrary_GameGenreRecord);

    static readonly grpc::Method<global::Gamelibrary.GameGenreRecord, global::Gamelibrary.GameGenreResult> __Method_AddGameGenre = new grpc::Method<global::Gamelibrary.GameGenreRecord, global::Gamelibrary.GameGenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGameGenre",
        __Marshaller_gamelibrary_GameGenreRecord,
        __Marshaller_gamelibrary_GameGenreResult);

    static readonly grpc::Method<global::Gamelibrary.GameGenreRecord, global::Gamelibrary.GameGenreResult> __Method_EditGameGenre = new grpc::Method<global::Gamelibrary.GameGenreRecord, global::Gamelibrary.GameGenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGameGenre",
        __Marshaller_gamelibrary_GameGenreRecord,
        __Marshaller_gamelibrary_GameGenreResult);

    static readonly grpc::Method<global::Gamelibrary.GameGenreRecord, global::Gamelibrary.GameGenreResult> __Method_DeleteGameGenre = new grpc::Method<global::Gamelibrary.GameGenreRecord, global::Gamelibrary.GameGenreResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGameGenre",
        __Marshaller_gamelibrary_GameGenreRecord,
        __Marshaller_gamelibrary_GameGenreResult);

    static readonly grpc::Method<global::Gamelibrary.GamePlatformsSearchRequest, global::Gamelibrary.GamePlatformRecord> __Method_SearchGamePlatforms = new grpc::Method<global::Gamelibrary.GamePlatformsSearchRequest, global::Gamelibrary.GamePlatformRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGamePlatforms",
        __Marshaller_gamelibrary_GamePlatformsSearchRequest,
        __Marshaller_gamelibrary_GamePlatformRecord);

    static readonly grpc::Method<global::Gamelibrary.GamePlatformsSearchRequestByGameId, global::Gamelibrary.GamePlatformRecord> __Method_SearchGamePlatformsByGameId = new grpc::Method<global::Gamelibrary.GamePlatformsSearchRequestByGameId, global::Gamelibrary.GamePlatformRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGamePlatformsByGameId",
        __Marshaller_gamelibrary_GamePlatformsSearchRequestByGameId,
        __Marshaller_gamelibrary_GamePlatformRecord);

    static readonly grpc::Method<global::Gamelibrary.GamePlatformsSearchRequestByPlatformId, global::Gamelibrary.GamePlatformRecord> __Method_SearchGamePlatformsByPlatformId = new grpc::Method<global::Gamelibrary.GamePlatformsSearchRequestByPlatformId, global::Gamelibrary.GamePlatformRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGamePlatformsByPlatformId",
        __Marshaller_gamelibrary_GamePlatformsSearchRequestByPlatformId,
        __Marshaller_gamelibrary_GamePlatformRecord);

    static readonly grpc::Method<global::Gamelibrary.GamePlatformRecord, global::Gamelibrary.GamePlatformResult> __Method_AddGamePlatform = new grpc::Method<global::Gamelibrary.GamePlatformRecord, global::Gamelibrary.GamePlatformResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGamePlatform",
        __Marshaller_gamelibrary_GamePlatformRecord,
        __Marshaller_gamelibrary_GamePlatformResult);

    static readonly grpc::Method<global::Gamelibrary.GamePlatformRecord, global::Gamelibrary.GamePlatformResult> __Method_EditGamePlatform = new grpc::Method<global::Gamelibrary.GamePlatformRecord, global::Gamelibrary.GamePlatformResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGamePlatform",
        __Marshaller_gamelibrary_GamePlatformRecord,
        __Marshaller_gamelibrary_GamePlatformResult);

    static readonly grpc::Method<global::Gamelibrary.GamePlatformRecord, global::Gamelibrary.GamePlatformResult> __Method_DeleteGamePlatform = new grpc::Method<global::Gamelibrary.GamePlatformRecord, global::Gamelibrary.GamePlatformResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGamePlatform",
        __Marshaller_gamelibrary_GamePlatformRecord,
        __Marshaller_gamelibrary_GamePlatformResult);

    static readonly grpc::Method<global::Gamelibrary.SearchGameReviewsRequest, global::Gamelibrary.GameReviewRecord> __Method_SearchGameReviews = new grpc::Method<global::Gamelibrary.SearchGameReviewsRequest, global::Gamelibrary.GameReviewRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameReviews",
        __Marshaller_gamelibrary_SearchGameReviewsRequest,
        __Marshaller_gamelibrary_GameReviewRecord);

    static readonly grpc::Method<global::Gamelibrary.SearchGameReviewByGameIdRequest, global::Gamelibrary.GameReviewRecord> __Method_SearchGameReviewByGameId = new grpc::Method<global::Gamelibrary.SearchGameReviewByGameIdRequest, global::Gamelibrary.GameReviewRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameReviewByGameId",
        __Marshaller_gamelibrary_SearchGameReviewByGameIdRequest,
        __Marshaller_gamelibrary_GameReviewRecord);

    static readonly grpc::Method<global::Gamelibrary.SearchGameReviewByReviewIdRequest, global::Gamelibrary.GameReviewRecord> __Method_SearchGameReviewByReviewId = new grpc::Method<global::Gamelibrary.SearchGameReviewByReviewIdRequest, global::Gamelibrary.GameReviewRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameReviewByReviewId",
        __Marshaller_gamelibrary_SearchGameReviewByReviewIdRequest,
        __Marshaller_gamelibrary_GameReviewRecord);

    static readonly grpc::Method<global::Gamelibrary.GameReviewRecord, global::Gamelibrary.GameReviewResult> __Method_AddGameReview = new grpc::Method<global::Gamelibrary.GameReviewRecord, global::Gamelibrary.GameReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGameReview",
        __Marshaller_gamelibrary_GameReviewRecord,
        __Marshaller_gamelibrary_GameReviewResult);

    static readonly grpc::Method<global::Gamelibrary.GameReviewRecord, global::Gamelibrary.GameReviewResult> __Method_EditGameReview = new grpc::Method<global::Gamelibrary.GameReviewRecord, global::Gamelibrary.GameReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGameReview",
        __Marshaller_gamelibrary_GameReviewRecord,
        __Marshaller_gamelibrary_GameReviewResult);

    static readonly grpc::Method<global::Gamelibrary.GameReviewRecord, global::Gamelibrary.GameReviewResult> __Method_DeleteGameReview = new grpc::Method<global::Gamelibrary.GameReviewRecord, global::Gamelibrary.GameReviewResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGameReview",
        __Marshaller_gamelibrary_GameReviewRecord,
        __Marshaller_gamelibrary_GameReviewResult);

    static readonly grpc::Method<global::Gamelibrary.GameRatingsSearchRequest, global::Gamelibrary.GameRatingRecord> __Method_SearchGameRatings = new grpc::Method<global::Gamelibrary.GameRatingsSearchRequest, global::Gamelibrary.GameRatingRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameRatings",
        __Marshaller_gamelibrary_GameRatingsSearchRequest,
        __Marshaller_gamelibrary_GameRatingRecord);

    static readonly grpc::Method<global::Gamelibrary.GameRatingsSearchRequestByGameId, global::Gamelibrary.GameRatingRecord> __Method_SearchGameRatingByGameId = new grpc::Method<global::Gamelibrary.GameRatingsSearchRequestByGameId, global::Gamelibrary.GameRatingRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameRatingByGameId",
        __Marshaller_gamelibrary_GameRatingsSearchRequestByGameId,
        __Marshaller_gamelibrary_GameRatingRecord);

    static readonly grpc::Method<global::Gamelibrary.GameRatingsSearchRequestByRatingId, global::Gamelibrary.GameRatingRecord> __Method_SearchGameRatingByRatingId = new grpc::Method<global::Gamelibrary.GameRatingsSearchRequestByRatingId, global::Gamelibrary.GameRatingRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameRatingByRatingId",
        __Marshaller_gamelibrary_GameRatingsSearchRequestByRatingId,
        __Marshaller_gamelibrary_GameRatingRecord);

    static readonly grpc::Method<global::Gamelibrary.GameRatingRecord, global::Gamelibrary.GameRatingResult> __Method_AddGameRating = new grpc::Method<global::Gamelibrary.GameRatingRecord, global::Gamelibrary.GameRatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGameRating",
        __Marshaller_gamelibrary_GameRatingRecord,
        __Marshaller_gamelibrary_GameRatingResult);

    static readonly grpc::Method<global::Gamelibrary.GameRatingRecord, global::Gamelibrary.GameRatingResult> __Method_EditGameRating = new grpc::Method<global::Gamelibrary.GameRatingRecord, global::Gamelibrary.GameRatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGameRating",
        __Marshaller_gamelibrary_GameRatingRecord,
        __Marshaller_gamelibrary_GameRatingResult);

    static readonly grpc::Method<global::Gamelibrary.GameRatingRecord, global::Gamelibrary.GameRatingResult> __Method_DeleteGameRating = new grpc::Method<global::Gamelibrary.GameRatingRecord, global::Gamelibrary.GameRatingResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGameRating",
        __Marshaller_gamelibrary_GameRatingRecord,
        __Marshaller_gamelibrary_GameRatingResult);

    static readonly grpc::Method<global::Gamelibrary.GameImagesSearchRequest, global::Gamelibrary.GameImageRecord> __Method_SearchGameImages = new grpc::Method<global::Gamelibrary.GameImagesSearchRequest, global::Gamelibrary.GameImageRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameImages",
        __Marshaller_gamelibrary_GameImagesSearchRequest,
        __Marshaller_gamelibrary_GameImageRecord);

    static readonly grpc::Method<global::Gamelibrary.GameImagesSearchRequestByGameId, global::Gamelibrary.GameImageRecord> __Method_SearchGameImageByGameId = new grpc::Method<global::Gamelibrary.GameImagesSearchRequestByGameId, global::Gamelibrary.GameImageRecord>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchGameImageByGameId",
        __Marshaller_gamelibrary_GameImagesSearchRequestByGameId,
        __Marshaller_gamelibrary_GameImageRecord);

    static readonly grpc::Method<global::Gamelibrary.GameImageRecord, global::Gamelibrary.GameImageResult> __Method_AddGameImage = new grpc::Method<global::Gamelibrary.GameImageRecord, global::Gamelibrary.GameImageResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddGameImage",
        __Marshaller_gamelibrary_GameImageRecord,
        __Marshaller_gamelibrary_GameImageResult);

    static readonly grpc::Method<global::Gamelibrary.GameImageRecord, global::Gamelibrary.GameImageResult> __Method_EditGameImage = new grpc::Method<global::Gamelibrary.GameImageRecord, global::Gamelibrary.GameImageResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EditGameImage",
        __Marshaller_gamelibrary_GameImageRecord,
        __Marshaller_gamelibrary_GameImageResult);

    static readonly grpc::Method<global::Gamelibrary.GameImageRecord, global::Gamelibrary.GameImageResult> __Method_DeleteGameImage = new grpc::Method<global::Gamelibrary.GameImageRecord, global::Gamelibrary.GameImageResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGameImage",
        __Marshaller_gamelibrary_GameImageRecord,
        __Marshaller_gamelibrary_GameImageResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Gamelibrary.GamelibraryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameLibrary</summary>
    public abstract partial class GameLibraryBase
    {
      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGames(global::Gamelibrary.GamesSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameResult> AddGame(global::Gamelibrary.GameRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameResult> EditGame(global::Gamelibrary.GameRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameResult> DeleteGame(global::Gamelibrary.GameRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of genres that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGenres(global::Gamelibrary.GenresSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GenreRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GenreResult> AddGenre(global::Gamelibrary.GenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GenreResult> EditGenre(global::Gamelibrary.GenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GenreResult> DeleteGenre(global::Gamelibrary.GenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of ratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchRatings(global::Gamelibrary.RatingsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.RatingRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.RatingResult> AddRating(global::Gamelibrary.RatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.RatingResult> EditRating(global::Gamelibrary.RatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.RatingResult> DeleteRating(global::Gamelibrary.RatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of reviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchReviews(global::Gamelibrary.ReviewsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.ReviewRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.ReviewResult> AddReview(global::Gamelibrary.ReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.ReviewResult> EditReview(global::Gamelibrary.ReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.ReviewResult> DeleteReview(global::Gamelibrary.ReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of platforms that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchPlatforms(global::Gamelibrary.PlatformsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.PlatformRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new platform record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.PlatformResult> AddPlatform(global::Gamelibrary.PlatformRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a platform record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.PlatformResult> EditPlatform(global::Gamelibrary.PlatformRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a platform record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.PlatformResult> DeletePlatform(global::Gamelibrary.PlatformRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGameGenres(global::Gamelibrary.GameGenresSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameGenreRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameGenresByGameId(global::Gamelibrary.GameGenresSearchRequestByGameId request, grpc::IServerStreamWriter<global::Gamelibrary.GameGenreRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameGenresByGenreId(global::Gamelibrary.GameGenresSearchRequestByGenreId request, grpc::IServerStreamWriter<global::Gamelibrary.GameGenreRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new gamegenre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameGenreResult> AddGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a gamegenre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameGenreResult> EditGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gamegenre record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameGenreResult> DeleteGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of gameplatforms that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGamePlatforms(global::Gamelibrary.GamePlatformsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GamePlatformRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGamePlatformsByGameId(global::Gamelibrary.GamePlatformsSearchRequestByGameId request, grpc::IServerStreamWriter<global::Gamelibrary.GamePlatformRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGamePlatformsByPlatformId(global::Gamelibrary.GamePlatformsSearchRequestByPlatformId request, grpc::IServerStreamWriter<global::Gamelibrary.GamePlatformRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new gameplatform record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GamePlatformResult> AddGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a gameplatform record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GamePlatformResult> EditGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gameplatform record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GamePlatformResult> DeleteGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of gamereviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGameReviews(global::Gamelibrary.SearchGameReviewsRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameReviewRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameReviewByGameId(global::Gamelibrary.SearchGameReviewByGameIdRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameReviewRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameReviewByReviewId(global::Gamelibrary.SearchGameReviewByReviewIdRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameReviewRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new gamereview record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameReviewResult> AddGameReview(global::Gamelibrary.GameReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a gamereview record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameReviewResult> EditGameReview(global::Gamelibrary.GameReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gamereview record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameReviewResult> DeleteGameReview(global::Gamelibrary.GameReviewRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of gameratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGameRatings(global::Gamelibrary.GameRatingsSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameRatingRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameRatingByGameId(global::Gamelibrary.GameRatingsSearchRequestByGameId request, grpc::IServerStreamWriter<global::Gamelibrary.GameRatingRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameRatingByRatingId(global::Gamelibrary.GameRatingsSearchRequestByRatingId request, grpc::IServerStreamWriter<global::Gamelibrary.GameRatingRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new gamerating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameRatingResult> AddGameRating(global::Gamelibrary.GameRatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a gamerating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameRatingResult> EditGameRating(global::Gamelibrary.GameRatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gamerating record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameRatingResult> DeleteGameRating(global::Gamelibrary.GameRatingRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a list of gameimages that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SearchGameImages(global::Gamelibrary.GameImagesSearchRequest request, grpc::IServerStreamWriter<global::Gamelibrary.GameImageRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SearchGameImageByGameId(global::Gamelibrary.GameImagesSearchRequestByGameId request, grpc::IServerStreamWriter<global::Gamelibrary.GameImageRecord> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a new gameimage record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameImageResult> AddGameImage(global::Gamelibrary.GameImageRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Edit a gameimage record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameImageResult> EditGameImage(global::Gamelibrary.GameImageRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a gameimage record
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Gamelibrary.GameImageResult> DeleteGameImage(global::Gamelibrary.GameImageRecord request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameLibrary</summary>
    public partial class GameLibraryClient : grpc::ClientBase<GameLibraryClient>
    {
      /// <summary>Creates a new client for GameLibrary</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameLibraryClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameLibrary that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameLibraryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameLibraryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameLibraryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRecord> SearchGames(global::Gamelibrary.GamesSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRecord> SearchGames(global::Gamelibrary.GamesSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGames, null, options, request);
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult AddGame(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult AddGame(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGame, null, options, request);
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> AddGameAsync(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> AddGameAsync(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGame, null, options, request);
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult EditGame(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult EditGame(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGame, null, options, request);
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> EditGameAsync(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> EditGameAsync(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGame, null, options, request);
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult DeleteGame(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameResult DeleteGame(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGame, null, options, request);
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> DeleteGameAsync(global::Gamelibrary.GameRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a game record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameResult> DeleteGameAsync(global::Gamelibrary.GameRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGame, null, options, request);
      }
      /// <summary>
      /// Obtains a list of genres that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GenreRecord> SearchGenres(global::Gamelibrary.GenresSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGenres(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of genres that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GenreRecord> SearchGenres(global::Gamelibrary.GenresSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGenres, null, options, request);
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult AddGenre(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult AddGenre(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGenre, null, options, request);
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> AddGenreAsync(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> AddGenreAsync(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGenre, null, options, request);
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult EditGenre(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult EditGenre(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGenre, null, options, request);
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> EditGenreAsync(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> EditGenreAsync(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGenre, null, options, request);
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult DeleteGenre(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GenreResult DeleteGenre(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGenre, null, options, request);
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> DeleteGenreAsync(global::Gamelibrary.GenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a genre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GenreResult> DeleteGenreAsync(global::Gamelibrary.GenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGenre, null, options, request);
      }
      /// <summary>
      /// Obtains a list of ratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.RatingRecord> SearchRatings(global::Gamelibrary.RatingsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchRatings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of ratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.RatingRecord> SearchRatings(global::Gamelibrary.RatingsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchRatings, null, options, request);
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult AddRating(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult AddRating(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddRating, null, options, request);
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> AddRatingAsync(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> AddRatingAsync(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddRating, null, options, request);
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult EditRating(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult EditRating(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditRating, null, options, request);
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> EditRatingAsync(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> EditRatingAsync(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditRating, null, options, request);
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult DeleteRating(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.RatingResult DeleteRating(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRating, null, options, request);
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> DeleteRatingAsync(global::Gamelibrary.RatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a rating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.RatingResult> DeleteRatingAsync(global::Gamelibrary.RatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRating, null, options, request);
      }
      /// <summary>
      /// Obtains a list of reviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.ReviewRecord> SearchReviews(global::Gamelibrary.ReviewsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchReviews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of reviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.ReviewRecord> SearchReviews(global::Gamelibrary.ReviewsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchReviews, null, options, request);
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult AddReview(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult AddReview(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddReview, null, options, request);
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> AddReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> AddReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddReview, null, options, request);
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult EditReview(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult EditReview(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditReview, null, options, request);
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> EditReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> EditReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditReview, null, options, request);
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult DeleteReview(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.ReviewResult DeleteReview(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteReview, null, options, request);
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> DeleteReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a review record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.ReviewResult> DeleteReviewAsync(global::Gamelibrary.ReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteReview, null, options, request);
      }
      /// <summary>
      /// Obtains a list of platforms that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.PlatformRecord> SearchPlatforms(global::Gamelibrary.PlatformsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchPlatforms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of platforms that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.PlatformRecord> SearchPlatforms(global::Gamelibrary.PlatformsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchPlatforms, null, options, request);
      }
      /// <summary>
      /// Add a new platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.PlatformResult AddPlatform(global::Gamelibrary.PlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.PlatformResult AddPlatform(global::Gamelibrary.PlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPlatform, null, options, request);
      }
      /// <summary>
      /// Add a new platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.PlatformResult> AddPlatformAsync(global::Gamelibrary.PlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.PlatformResult> AddPlatformAsync(global::Gamelibrary.PlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPlatform, null, options, request);
      }
      /// <summary>
      /// Edit a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.PlatformResult EditPlatform(global::Gamelibrary.PlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditPlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.PlatformResult EditPlatform(global::Gamelibrary.PlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditPlatform, null, options, request);
      }
      /// <summary>
      /// Edit a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.PlatformResult> EditPlatformAsync(global::Gamelibrary.PlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditPlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.PlatformResult> EditPlatformAsync(global::Gamelibrary.PlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditPlatform, null, options, request);
      }
      /// <summary>
      /// Delete a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.PlatformResult DeletePlatform(global::Gamelibrary.PlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.PlatformResult DeletePlatform(global::Gamelibrary.PlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePlatform, null, options, request);
      }
      /// <summary>
      /// Delete a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.PlatformResult> DeletePlatformAsync(global::Gamelibrary.PlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a platform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.PlatformResult> DeletePlatformAsync(global::Gamelibrary.PlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePlatform, null, options, request);
      }
      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameGenreRecord> SearchGameGenres(global::Gamelibrary.GameGenresSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameGenres(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of games that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameGenreRecord> SearchGameGenres(global::Gamelibrary.GameGenresSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameGenres, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameGenreRecord> SearchGameGenresByGameId(global::Gamelibrary.GameGenresSearchRequestByGameId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameGenresByGameId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameGenreRecord> SearchGameGenresByGameId(global::Gamelibrary.GameGenresSearchRequestByGameId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameGenresByGameId, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameGenreRecord> SearchGameGenresByGenreId(global::Gamelibrary.GameGenresSearchRequestByGenreId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameGenresByGenreId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameGenreRecord> SearchGameGenresByGenreId(global::Gamelibrary.GameGenresSearchRequestByGenreId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameGenresByGenreId, null, options, request);
      }
      /// <summary>
      /// Add a new gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameGenreResult AddGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameGenreResult AddGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGameGenre, null, options, request);
      }
      /// <summary>
      /// Add a new gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameGenreResult> AddGameGenreAsync(global::Gamelibrary.GameGenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameGenreResult> AddGameGenreAsync(global::Gamelibrary.GameGenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGameGenre, null, options, request);
      }
      /// <summary>
      /// Edit a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameGenreResult EditGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameGenreResult EditGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGameGenre, null, options, request);
      }
      /// <summary>
      /// Edit a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameGenreResult> EditGameGenreAsync(global::Gamelibrary.GameGenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameGenreResult> EditGameGenreAsync(global::Gamelibrary.GameGenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGameGenre, null, options, request);
      }
      /// <summary>
      /// Delete a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameGenreResult DeleteGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameGenre(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameGenreResult DeleteGameGenre(global::Gamelibrary.GameGenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGameGenre, null, options, request);
      }
      /// <summary>
      /// Delete a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameGenreResult> DeleteGameGenreAsync(global::Gamelibrary.GameGenreRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameGenreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gamegenre record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameGenreResult> DeleteGameGenreAsync(global::Gamelibrary.GameGenreRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGameGenre, null, options, request);
      }
      /// <summary>
      /// Obtains a list of gameplatforms that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GamePlatformRecord> SearchGamePlatforms(global::Gamelibrary.GamePlatformsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGamePlatforms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of gameplatforms that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GamePlatformRecord> SearchGamePlatforms(global::Gamelibrary.GamePlatformsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGamePlatforms, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GamePlatformRecord> SearchGamePlatformsByGameId(global::Gamelibrary.GamePlatformsSearchRequestByGameId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGamePlatformsByGameId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GamePlatformRecord> SearchGamePlatformsByGameId(global::Gamelibrary.GamePlatformsSearchRequestByGameId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGamePlatformsByGameId, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GamePlatformRecord> SearchGamePlatformsByPlatformId(global::Gamelibrary.GamePlatformsSearchRequestByPlatformId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGamePlatformsByPlatformId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GamePlatformRecord> SearchGamePlatformsByPlatformId(global::Gamelibrary.GamePlatformsSearchRequestByPlatformId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGamePlatformsByPlatformId, null, options, request);
      }
      /// <summary>
      /// Add a new gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GamePlatformResult AddGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGamePlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GamePlatformResult AddGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGamePlatform, null, options, request);
      }
      /// <summary>
      /// Add a new gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GamePlatformResult> AddGamePlatformAsync(global::Gamelibrary.GamePlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGamePlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GamePlatformResult> AddGamePlatformAsync(global::Gamelibrary.GamePlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGamePlatform, null, options, request);
      }
      /// <summary>
      /// Edit a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GamePlatformResult EditGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGamePlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GamePlatformResult EditGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGamePlatform, null, options, request);
      }
      /// <summary>
      /// Edit a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GamePlatformResult> EditGamePlatformAsync(global::Gamelibrary.GamePlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGamePlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GamePlatformResult> EditGamePlatformAsync(global::Gamelibrary.GamePlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGamePlatform, null, options, request);
      }
      /// <summary>
      /// Delete a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GamePlatformResult DeleteGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGamePlatform(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GamePlatformResult DeleteGamePlatform(global::Gamelibrary.GamePlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGamePlatform, null, options, request);
      }
      /// <summary>
      /// Delete a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GamePlatformResult> DeleteGamePlatformAsync(global::Gamelibrary.GamePlatformRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGamePlatformAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gameplatform record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GamePlatformResult> DeleteGamePlatformAsync(global::Gamelibrary.GamePlatformRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGamePlatform, null, options, request);
      }
      /// <summary>
      /// Obtains a list of gamereviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameReviewRecord> SearchGameReviews(global::Gamelibrary.SearchGameReviewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameReviews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of gamereviews that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameReviewRecord> SearchGameReviews(global::Gamelibrary.SearchGameReviewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameReviews, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameReviewRecord> SearchGameReviewByGameId(global::Gamelibrary.SearchGameReviewByGameIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameReviewByGameId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameReviewRecord> SearchGameReviewByGameId(global::Gamelibrary.SearchGameReviewByGameIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameReviewByGameId, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameReviewRecord> SearchGameReviewByReviewId(global::Gamelibrary.SearchGameReviewByReviewIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameReviewByReviewId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameReviewRecord> SearchGameReviewByReviewId(global::Gamelibrary.SearchGameReviewByReviewIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameReviewByReviewId, null, options, request);
      }
      /// <summary>
      /// Add a new gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameReviewResult AddGameReview(global::Gamelibrary.GameReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameReviewResult AddGameReview(global::Gamelibrary.GameReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGameReview, null, options, request);
      }
      /// <summary>
      /// Add a new gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameReviewResult> AddGameReviewAsync(global::Gamelibrary.GameReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameReviewResult> AddGameReviewAsync(global::Gamelibrary.GameReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGameReview, null, options, request);
      }
      /// <summary>
      /// Edit a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameReviewResult EditGameReview(global::Gamelibrary.GameReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameReviewResult EditGameReview(global::Gamelibrary.GameReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGameReview, null, options, request);
      }
      /// <summary>
      /// Edit a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameReviewResult> EditGameReviewAsync(global::Gamelibrary.GameReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameReviewResult> EditGameReviewAsync(global::Gamelibrary.GameReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGameReview, null, options, request);
      }
      /// <summary>
      /// Delete a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameReviewResult DeleteGameReview(global::Gamelibrary.GameReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameReview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameReviewResult DeleteGameReview(global::Gamelibrary.GameReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGameReview, null, options, request);
      }
      /// <summary>
      /// Delete a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameReviewResult> DeleteGameReviewAsync(global::Gamelibrary.GameReviewRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameReviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gamereview record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameReviewResult> DeleteGameReviewAsync(global::Gamelibrary.GameReviewRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGameReview, null, options, request);
      }
      /// <summary>
      /// Obtains a list of gameratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRatingRecord> SearchGameRatings(global::Gamelibrary.GameRatingsSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameRatings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of gameratings that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRatingRecord> SearchGameRatings(global::Gamelibrary.GameRatingsSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameRatings, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRatingRecord> SearchGameRatingByGameId(global::Gamelibrary.GameRatingsSearchRequestByGameId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameRatingByGameId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRatingRecord> SearchGameRatingByGameId(global::Gamelibrary.GameRatingsSearchRequestByGameId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameRatingByGameId, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRatingRecord> SearchGameRatingByRatingId(global::Gamelibrary.GameRatingsSearchRequestByRatingId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameRatingByRatingId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameRatingRecord> SearchGameRatingByRatingId(global::Gamelibrary.GameRatingsSearchRequestByRatingId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameRatingByRatingId, null, options, request);
      }
      /// <summary>
      /// Add a new gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameRatingResult AddGameRating(global::Gamelibrary.GameRatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameRatingResult AddGameRating(global::Gamelibrary.GameRatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGameRating, null, options, request);
      }
      /// <summary>
      /// Add a new gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameRatingResult> AddGameRatingAsync(global::Gamelibrary.GameRatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameRatingResult> AddGameRatingAsync(global::Gamelibrary.GameRatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGameRating, null, options, request);
      }
      /// <summary>
      /// Edit a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameRatingResult EditGameRating(global::Gamelibrary.GameRatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameRatingResult EditGameRating(global::Gamelibrary.GameRatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGameRating, null, options, request);
      }
      /// <summary>
      /// Edit a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameRatingResult> EditGameRatingAsync(global::Gamelibrary.GameRatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameRatingResult> EditGameRatingAsync(global::Gamelibrary.GameRatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGameRating, null, options, request);
      }
      /// <summary>
      /// Delete a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameRatingResult DeleteGameRating(global::Gamelibrary.GameRatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameRatingResult DeleteGameRating(global::Gamelibrary.GameRatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGameRating, null, options, request);
      }
      /// <summary>
      /// Delete a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameRatingResult> DeleteGameRatingAsync(global::Gamelibrary.GameRatingRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gamerating record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameRatingResult> DeleteGameRatingAsync(global::Gamelibrary.GameRatingRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGameRating, null, options, request);
      }
      /// <summary>
      /// Obtains a list of gameimages that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameImageRecord> SearchGameImages(global::Gamelibrary.GameImagesSearchRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a list of gameimages that match the request parameters.
      /// Streamed rather than returned at once (e.g. in a response message with a repeated field)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameImageRecord> SearchGameImages(global::Gamelibrary.GameImagesSearchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameImages, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameImageRecord> SearchGameImageByGameId(global::Gamelibrary.GameImagesSearchRequestByGameId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGameImageByGameId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Gamelibrary.GameImageRecord> SearchGameImageByGameId(global::Gamelibrary.GameImagesSearchRequestByGameId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchGameImageByGameId, null, options, request);
      }
      /// <summary>
      /// Add a new gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameImageResult AddGameImage(global::Gamelibrary.GameImageRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameImageResult AddGameImage(global::Gamelibrary.GameImageRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddGameImage, null, options, request);
      }
      /// <summary>
      /// Add a new gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameImageResult> AddGameImageAsync(global::Gamelibrary.GameImageRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddGameImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a new gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameImageResult> AddGameImageAsync(global::Gamelibrary.GameImageRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddGameImage, null, options, request);
      }
      /// <summary>
      /// Edit a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameImageResult EditGameImage(global::Gamelibrary.GameImageRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameImageResult EditGameImage(global::Gamelibrary.GameImageRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EditGameImage, null, options, request);
      }
      /// <summary>
      /// Edit a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameImageResult> EditGameImageAsync(global::Gamelibrary.GameImageRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EditGameImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Edit a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameImageResult> EditGameImageAsync(global::Gamelibrary.GameImageRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EditGameImage, null, options, request);
      }
      /// <summary>
      /// Delete a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameImageResult DeleteGameImage(global::Gamelibrary.GameImageRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Gamelibrary.GameImageResult DeleteGameImage(global::Gamelibrary.GameImageRecord request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGameImage, null, options, request);
      }
      /// <summary>
      /// Delete a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameImageResult> DeleteGameImageAsync(global::Gamelibrary.GameImageRecord request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGameImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a gameimage record
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Gamelibrary.GameImageResult> DeleteGameImageAsync(global::Gamelibrary.GameImageRecord request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGameImage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameLibraryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameLibraryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameLibraryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SearchGames, serviceImpl.SearchGames)
          .AddMethod(__Method_AddGame, serviceImpl.AddGame)
          .AddMethod(__Method_EditGame, serviceImpl.EditGame)
          .AddMethod(__Method_DeleteGame, serviceImpl.DeleteGame)
          .AddMethod(__Method_SearchGenres, serviceImpl.SearchGenres)
          .AddMethod(__Method_AddGenre, serviceImpl.AddGenre)
          .AddMethod(__Method_EditGenre, serviceImpl.EditGenre)
          .AddMethod(__Method_DeleteGenre, serviceImpl.DeleteGenre)
          .AddMethod(__Method_SearchRatings, serviceImpl.SearchRatings)
          .AddMethod(__Method_AddRating, serviceImpl.AddRating)
          .AddMethod(__Method_EditRating, serviceImpl.EditRating)
          .AddMethod(__Method_DeleteRating, serviceImpl.DeleteRating)
          .AddMethod(__Method_SearchReviews, serviceImpl.SearchReviews)
          .AddMethod(__Method_AddReview, serviceImpl.AddReview)
          .AddMethod(__Method_EditReview, serviceImpl.EditReview)
          .AddMethod(__Method_DeleteReview, serviceImpl.DeleteReview)
          .AddMethod(__Method_SearchPlatforms, serviceImpl.SearchPlatforms)
          .AddMethod(__Method_AddPlatform, serviceImpl.AddPlatform)
          .AddMethod(__Method_EditPlatform, serviceImpl.EditPlatform)
          .AddMethod(__Method_DeletePlatform, serviceImpl.DeletePlatform)
          .AddMethod(__Method_SearchGameGenres, serviceImpl.SearchGameGenres)
          .AddMethod(__Method_SearchGameGenresByGameId, serviceImpl.SearchGameGenresByGameId)
          .AddMethod(__Method_SearchGameGenresByGenreId, serviceImpl.SearchGameGenresByGenreId)
          .AddMethod(__Method_AddGameGenre, serviceImpl.AddGameGenre)
          .AddMethod(__Method_EditGameGenre, serviceImpl.EditGameGenre)
          .AddMethod(__Method_DeleteGameGenre, serviceImpl.DeleteGameGenre)
          .AddMethod(__Method_SearchGamePlatforms, serviceImpl.SearchGamePlatforms)
          .AddMethod(__Method_SearchGamePlatformsByGameId, serviceImpl.SearchGamePlatformsByGameId)
          .AddMethod(__Method_SearchGamePlatformsByPlatformId, serviceImpl.SearchGamePlatformsByPlatformId)
          .AddMethod(__Method_AddGamePlatform, serviceImpl.AddGamePlatform)
          .AddMethod(__Method_EditGamePlatform, serviceImpl.EditGamePlatform)
          .AddMethod(__Method_DeleteGamePlatform, serviceImpl.DeleteGamePlatform)
          .AddMethod(__Method_SearchGameReviews, serviceImpl.SearchGameReviews)
          .AddMethod(__Method_SearchGameReviewByGameId, serviceImpl.SearchGameReviewByGameId)
          .AddMethod(__Method_SearchGameReviewByReviewId, serviceImpl.SearchGameReviewByReviewId)
          .AddMethod(__Method_AddGameReview, serviceImpl.AddGameReview)
          .AddMethod(__Method_EditGameReview, serviceImpl.EditGameReview)
          .AddMethod(__Method_DeleteGameReview, serviceImpl.DeleteGameReview)
          .AddMethod(__Method_SearchGameRatings, serviceImpl.SearchGameRatings)
          .AddMethod(__Method_SearchGameRatingByGameId, serviceImpl.SearchGameRatingByGameId)
          .AddMethod(__Method_SearchGameRatingByRatingId, serviceImpl.SearchGameRatingByRatingId)
          .AddMethod(__Method_AddGameRating, serviceImpl.AddGameRating)
          .AddMethod(__Method_EditGameRating, serviceImpl.EditGameRating)
          .AddMethod(__Method_DeleteGameRating, serviceImpl.DeleteGameRating)
          .AddMethod(__Method_SearchGameImages, serviceImpl.SearchGameImages)
          .AddMethod(__Method_SearchGameImageByGameId, serviceImpl.SearchGameImageByGameId)
          .AddMethod(__Method_AddGameImage, serviceImpl.AddGameImage)
          .AddMethod(__Method_EditGameImage, serviceImpl.EditGameImage)
          .AddMethod(__Method_DeleteGameImage, serviceImpl.DeleteGameImage).Build();
    }

  }
}
#endregion
